import java.util.*;
import java.util.stream.Collectors;

class Product {
    String name;
    String category;
    double price;

    Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }
}

public class Main {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 70000),
            new Product("Phone", "Electronics", 50000),
            new Product("Shirt", "Clothing", 1500),
            new Product("Jeans", "Clothing", 2000),
            new Product("TV", "Electronics", 45000),
            new Product("Sofa", "Furniture", 30000)
        );

        // Group by category
        Map<String, List<Product>> groupedByCategory = products.stream()
            .collect(Collectors.groupingBy(p -> p.category));

        // Find most expensive product in each category
        Map<String, Optional<Product>> mostExpensiveProduct = products.stream()
            .collect(Collectors.groupingBy(
                p -> p.category,
                Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
            ));

        // Calculate average price of all products
        double avgPrice = products.stream()
            .mapToDouble(p -> p.price)
            .average()
            .orElse(0.0);

        // Display grouped products
        groupedByCategory.forEach((category, productList) -> {
            System.out.println("Category: " + category);
            productList.forEach(p -> System.out.println(p.name + " - $" + p.price));
        });

        // Display most expensive product in each category
        System.out.println("\nMost Expensive Products by Category:");
        mostExpensiveProduct.forEach((category, product) ->
            System.out.println(category + ": " + product.get().name + " - $" + product.get().price)
        );

        // Display average price
        System.out.println("\nAverage Price of All Products: $" + avgPrice);
    }
}
